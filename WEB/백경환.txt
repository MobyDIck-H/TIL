    MVC 선행과정
    1. 서버에 요청을 받는 단 하나의 서블릿 : 컨트롤러(DispatcherServlet.java) 생성
        1) 해당 서블릿의 매핑된 유알엘 패턴은 .do 라는 확장자를 가진 유알엘의 요청을 모두 받을 수 있게 한다
    2. 구현할 기능에 따라서 핸들러 클래스를 만든다
        1) 각각의 핸들러는 CommandController 라는 공통의 인터페이스를 구현한다
        2) 핸들러들은 실행되었을 때 호출되는 process()라는 메소드를 구현한다
        3) process()의 리턴은 경로값(String)이다
    3. 요청될 기능에 따라서 프로퍼티 파일로 .properties 파일에 키(url)과 밸류값(핸들러의 풀네임)을 준다
        1) 서블릿 설정에 init param으로 프로퍼티 경로를 연결한다
    4. 컨트롤러 역할을 하는 서블릿이 최초 실행될 때 호출하는 init()메소드를 구현한다
        1) 키값으로 요청 유알엘을 갖고 밸류 값으로 해당되는 핸들러 객체를 갖는 hashmap을 만든다
        2) 프로퍼티 파일을 읽어와서 프로퍼티의 갯수만큼 돌면서 해쉬맵에 푸시한다
    5. 컨트롤러에 doGet()메소드를 구현한다
        1) 두겟에는 요청된 유알엘 값을 받아와서 컨텍스트 패스를 지우는 작업을 먼저 진행하고
        2) 그 요청 유알엘과 init()메소드에 있던 키값을 비교해서 해당되는 핸들러 객체를 가져온다.
        3) 그 객체의 process()메소드를 호출해서 얻어온 경로로 포워딩 처리를 한다
        4) post 요청 시에도 처리할 수 있어야함으로 doPost()함수에 doGet()을 호출하는 코딩을 추가한다
    6. 긱각의 핸들러에는 get방식 post방식 등 요청 방식에 따라 어떻게 처리해야되는 지가 process()메소드 안에 구현되어있다
    
    글목록 페이지 글쓰기 버튼  > 글쓰기 완료
    1) 글쓰기 버튼을 누르면 write.do라는 유알엘로 요청된다
    2) 그럼 그 요청은 1차적으로 컨트롤러에서 받고 write.do 키값을 가진 WriteHandler객체를 해쉬맵에서 가져온다
    3) 그럼 그 핸들러의 process()메소드를 실행하게 된다
    4) pocess()메소드에선 get방식일때는 이프문에 의해서 write.jsp 경로를 반환하고
    5) 컨트롤러에서 그 값을 포워딩 시킨다
    6) write.jsp 즉, 글쓰기 창에서 인풋값에 값들을 입력하고 서브밋을 누르게되면
    7) 액션속성은 없고 post방식으로 자기 자신 유알엘로 서브밋된다.
    8) 그럼 디스패쳐에서 그 요청을 받고 다시 WriteHandler객체를 가져오고
    9) proces()메소드를 호출한다
    10) 포스트 방식이므로 이프문에 의해서 insert하는 과정을 거치고 글 상세보기 페이지로 리다이렉트된다